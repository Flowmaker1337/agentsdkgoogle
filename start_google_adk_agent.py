#!/usr/bin/env python3
"""
Launcher dla Google ADK Business Agent
Sprawdza zale≈ºno≈õci, instaluje Google ADK i uruchamia agenta
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_python_version():
    """Sprawd≈∫ wersjƒô Pythona"""
    if sys.version_info < (3, 9):
        print("‚ùå Wymagany Python 3.9 lub nowszy")
        print(f"   Obecna wersja: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def check_google_adk():
    """Sprawd≈∫ czy Google ADK jest dostƒôpne"""
    adk_path = Path("adk-python")
    
    if not adk_path.exists():
        print("‚ùå Google ADK nie znalezione")
        print("   Klonowanie repozytorium...")
        
        try:
            subprocess.run([
                "git", "clone", 
                "https://github.com/google/adk-python.git"
            ], check=True)
            print("‚úÖ Google ADK sklonowane pomy≈õlnie")
        except subprocess.CalledProcessError:
            print("‚ùå B≈ÇƒÖd klonowania Google ADK")
            return False
    
    # Sprawd≈∫ czy ADK jest zainstalowane
    adk_src = adk_path / "src"
    if adk_src.exists():
        print("‚úÖ Google ADK dostƒôpne")
        return True
    else:
        print("‚ùå Google ADK nieprawid≈Çowo zainstalowane")
        return False

def install_requirements():
    """Zainstaluj wymagane pakiety"""
    requirements_file = "requirements_google_adk.txt"
    
    if not Path(requirements_file).exists():
        print(f"‚ùå Brak pliku {requirements_file}")
        return False
    
    print("üì¶ Instalowanie zale≈ºno≈õci...")
    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install", 
            "-r", requirements_file
        ], check=True)
        print("‚úÖ Zale≈ºno≈õci zainstalowane")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå B≈ÇƒÖd instalacji zale≈ºno≈õci")
        return False

def check_environment():
    """Sprawd≈∫ Google Cloud credentials"""
    # Sprawd≈∫ czy istnieje plik credentials
    credentials_path = "google_cloud_credentials.json"
    
    if os.path.exists(credentials_path):
        print("‚úÖ Google Cloud Service Account credentials znalezione")
        # Ustaw zmiennƒÖ ≈õrodowiskowƒÖ
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = credentials_path
        
        # Sprawd≈∫ czy credentials sƒÖ prawid≈Çowe
        try:
            with open(credentials_path, 'r') as f:
                creds = json.load(f)
                project_id = creds.get('project_id')
                if project_id:
                    print(f"‚úÖ Project ID: {project_id}")
                    os.environ["GOOGLE_CLOUD_PROJECT"] = project_id
                    return True
                else:
                    print("‚ùå Nieprawid≈Çowy format credentials")
                    return False
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd odczytywania credentials: {e}")
            return False
    else:
        print("‚ùå Brak pliku google_cloud_credentials.json")
        print("üìù Potrzebujesz:")
        print("   - Plik google_cloud_credentials.json z Service Account")
        print("   - Domain-Wide Delegation skonfigurowane w Google Admin Console")
        return False

def create_env_file():
    """Stw√≥rz opcjonalny plik .env dla dodatkowej konfiguracji"""
    env_content = """# Google ADK Business Agent - Opcjonalna konfiguracja
# ======================================================
# Agent u≈ºywa google_cloud_credentials.json jako g≈Ç√≥wne ≈∫r√≥d≈Ço credentials

# Gmail Configuration (dla Domain-Wide Delegation)
GMAIL_DELEGATED_USER=kdunowski@district.org

# Vertex AI RAG Configuration (opcjonalne)
VERTEX_AI_RAG_CORPUS_NAME=business-knowledge-corpus
VERTEX_AI_RAG_REGION=us-central1

# WebSocket Server Configuration
WEBSOCKET_HOST=localhost
WEBSOCKET_PORT=8765

# Logging Configuration
LOG_LEVEL=INFO

# Opcjonalne: Google Search Engine ID (je≈õli u≈ºywasz Google Search)
GOOGLE_SEARCH_ENGINE_ID=your-search-engine-id

# MCP Tools Configuration
MCP_GMAIL_ENABLED=true
MCP_CALENDAR_ENABLED=true
"""
    
    env_file = Path(".env")
    if not env_file.exists():
        with open(env_file, "w") as f:
            f.write(env_content)
        print("‚úÖ Utworzono opcjonalny plik .env")
    else:
        print("‚ÑπÔ∏è  Plik .env ju≈º istnieje")

def test_google_adk_import():
    """Testuj import Google ADK"""
    try:
        # Dodaj ≈õcie≈ºkƒô do ADK
        adk_path = os.path.join(os.path.dirname(__file__), 'adk-python', 'src')
        if adk_path not in sys.path:
            sys.path.insert(0, adk_path)
        
        # Testuj import
        from google.adk.agents import LlmAgent
        from google.adk.models import Gemini
        from google.adk.tools import FunctionTool
        print("‚úÖ Google ADK importuje siƒô poprawnie")
        print(f"   - LlmAgent: {LlmAgent}")
        print(f"   - Gemini: {Gemini}")
        return True
    except ImportError as e:
        print(f"‚ùå B≈ÇƒÖd importu Google ADK: {e}")
        return False

def main():
    """G≈Ç√≥wna funkcja launchera"""
    print("""
ü§ñ Google ADK Business Agent Launcher
====================================
    """)
    
    # Sprawdzenia
    checks = [
        ("Python Version", check_python_version),
        ("Google ADK", check_google_adk),
        ("Dependencies", install_requirements),
        ("Google Cloud Credentials", check_environment),
        ("ADK Import", test_google_adk_import)
    ]
    
    for name, check_func in checks:
        print(f"\nüîç Sprawdzanie: {name}")
        if not check_func():
            print(f"\n‚ùå {name} - sprawdzenie nieudane")
            create_env_file()
            return False
    
    print("\n‚úÖ Wszystkie sprawdzenia przesz≈Çy pomy≈õlnie!")
    
    # Uruchom agenta
    print("\nüöÄ Uruchamianie Google ADK Business Agent...")
    try:
        from google_adk_business_agent import main as agent_main
        import asyncio
        asyncio.run(agent_main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Agent zatrzymany przez u≈ºytkownika")
    except Exception as e:
        print(f"\n‚ùå B≈ÇƒÖd uruchamiania agenta: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        print("\n‚ùå Sprawd≈∫ b≈Çƒôdy powy≈ºej i spr√≥buj ponownie")
        sys.exit(1)
    else:
        print("\n‚úÖ Google ADK Business Agent zako≈Ñczy≈Ç pracƒô") 