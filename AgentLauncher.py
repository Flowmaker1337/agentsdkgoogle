#!/usr/bin/env python3
"""
üöÄ Agent Launcher - Uruchamia wszystkie komponenty systemu Google ADK Business Agent

Uruchamia:
1. Session API (port 8000) - zarzƒÖdzanie sesjami i Glass UI
2. Google ADK Business Agent (port 8765) - g≈Ç√≥wny agent biznesowy

U≈ºycie:
    python AgentLauncher.py

Zatrzymanie:
    Ctrl+C (zatrzyma wszystkie procesy)
"""

import subprocess
import sys
import time
import signal
import os
from pathlib import Path

class AgentLauncher:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def log(self, message, level="INFO"):
        """Logowanie z kolorami"""
        colors = {
            "INFO": "\033[94m",    # Niebieski
            "SUCCESS": "\033[92m", # Zielony
            "WARNING": "\033[93m", # ≈ª√≥≈Çty
            "ERROR": "\033[91m",   # Czerwony
            "RESET": "\033[0m"     # Reset
        }
        
        timestamp = time.strftime("%H:%M:%S")
        color = colors.get(level, colors["INFO"])
        reset = colors["RESET"]
        print(f"{color}[{timestamp}] {level}: {message}{reset}")
    
    def check_dependencies(self):
        """Sprawdza czy wszystkie wymagane pliki istniejƒÖ"""
        self.log("üîç Sprawdzanie zale≈ºno≈õci...")
        
        required_files = [
            "session_api.py",
            "google_adk_business_agent.py",
            "modern_glass_agent_ui.html"
        ]
        
        missing_files = []
        for file in required_files:
            if not Path(file).exists():
                missing_files.append(file)
        
        if missing_files:
            self.log(f"‚ùå BrakujƒÖce pliki: {', '.join(missing_files)}", "ERROR")
            return False
        
        self.log("‚úÖ Wszystkie wymagane pliki znalezione", "SUCCESS")
        return True
    
    def check_ports(self):
        """Sprawdza czy porty sƒÖ wolne"""
        self.log("üîç Sprawdzanie port√≥w...")
        
        import socket
        
        def is_port_free(port):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.bind(('localhost', port))
                    return True
            except OSError:
                return False
        
        ports_to_check = [8000, 8765]
        busy_ports = []
        
        for port in ports_to_check:
            if not is_port_free(port):
                busy_ports.append(port)
        
        if busy_ports:
            self.log(f"‚ö†Ô∏è Porty zajƒôte: {', '.join(map(str, busy_ports))}", "WARNING")
            self.log("üí° Spr√≥buj: pkill -f session_api.py && pkill -f google_adk_business_agent.py", "INFO")
            return False
        
        self.log("‚úÖ Wszystkie porty wolne", "SUCCESS")
        return True
    
    def start_session_api(self):
        """Uruchamia Session API"""
        self.log("üöÄ Uruchamianie Session API (port 8000)...")
        
        try:
            process = subprocess.Popen(
                [sys.executable, "session_api.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            self.processes.append(("Session API", process))
            self.log("‚úÖ Session API uruchomione", "SUCCESS")
            return process
            
        except Exception as e:
            self.log(f"‚ùå B≈ÇƒÖd uruchamiania Session API: {e}", "ERROR")
            return None
    
    def start_business_agent(self):
        """Uruchamia Google ADK Business Agent"""
        self.log("ü§ñ Uruchamianie Google ADK Business Agent (port 8765)...")
        
        try:
            process = subprocess.Popen(
                [sys.executable, "google_adk_business_agent.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            self.processes.append(("Business Agent", process))
            self.log("‚úÖ Business Agent uruchomiony", "SUCCESS")
            return process
            
        except Exception as e:
            self.log(f"‚ùå B≈ÇƒÖd uruchamiania Business Agent: {e}", "ERROR")
            return None
    
    def wait_for_services(self):
        """Czeka a≈º serwisy bƒôdƒÖ gotowe"""
        self.log("‚è≥ Czekam na uruchomienie serwis√≥w...")
        
        # Czekaj na Session API
        for i in range(30):  # 30 sekund timeout
            try:
                import requests
                response = requests.get("http://localhost:8000/api/health", timeout=1)
                if response.status_code == 200:
                    self.log("‚úÖ Session API gotowe", "SUCCESS")
                    break
            except:
                pass
            time.sleep(1)
        else:
            self.log("‚ö†Ô∏è Session API mo≈ºe nie byƒá gotowe", "WARNING")
        
        # Kr√≥tka pauza dla Business Agent
        time.sleep(3)
        self.log("‚úÖ Business Agent powinien byƒá gotowy", "SUCCESS")
    
    def show_status(self):
        """Pokazuje status uruchomionych serwis√≥w"""
        self.log("üìä Status serwis√≥w:", "INFO")
        print("\n" + "="*60)
        print("üéØ GOOGLE ADK BUSINESS AGENT - SYSTEM URUCHOMIONY")
        print("="*60)
        print("üì° Session API:          http://localhost:8000")
        print("üé® Glass UI:             http://localhost:8000")
        print("üìñ API Docs:             http://localhost:8000/docs")
        print("ü§ñ Business Agent:       ws://localhost:8765")
        print("="*60)
        print("üí° Otw√≥rz przeglƒÖdarkƒô: http://localhost:8000")
        print("üõë Zatrzymanie: Ctrl+C")
        print("="*60 + "\n")
    
    def monitor_processes(self):
        """Monitoruje procesy i wy≈õwietla logi"""
        self.log("üëÄ Rozpoczynam monitorowanie proces√≥w...")
        
        while self.running:
            try:
                # Sprawd≈∫ czy procesy nadal dzia≈ÇajƒÖ
                for name, process in self.processes:
                    if process.poll() is not None:
                        self.log(f"‚ùå Proces {name} zako≈Ñczy≈Ç siƒô nieoczekiwanie", "ERROR")
                        self.cleanup()
                        return
                
                time.sleep(1)
                
            except KeyboardInterrupt:
                self.log("üõë Otrzymano sygna≈Ç zatrzymania", "WARNING")
                break
    
    def cleanup(self):
        """Zatrzymuje wszystkie procesy"""
        self.log("üßπ Zatrzymywanie proces√≥w...")
        self.running = False
        
        for name, process in self.processes:
            if process.poll() is None:  # Proces nadal dzia≈Ça
                self.log(f"üõë Zatrzymywanie {name}...")
                try:
                    process.terminate()
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    self.log(f"‚ö° Wymuszam zatrzymanie {name}...")
                    process.kill()
                except Exception as e:
                    self.log(f"‚ùå B≈ÇƒÖd zatrzymywania {name}: {e}", "ERROR")
        
        self.log("‚úÖ Wszystkie procesy zatrzymane", "SUCCESS")
    
    def signal_handler(self, signum, frame):
        """Obs≈Çuga sygna≈Ç√≥w (Ctrl+C)"""
        self.log("üõë Otrzymano sygna≈Ç zatrzymania...", "WARNING")
        self.cleanup()
        sys.exit(0)
    
    def run(self):
        """G≈Ç√≥wna funkcja uruchamiajƒÖca system"""
        # Rejestruj obs≈Çugƒô sygna≈Ç√≥w
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        print("\n" + "="*60)
        print("üöÄ GOOGLE ADK BUSINESS AGENT LAUNCHER")
        print("="*60)
        
        # Sprawd≈∫ zale≈ºno≈õci
        if not self.check_dependencies():
            sys.exit(1)
        
        # Sprawd≈∫ porty
        if not self.check_ports():
            sys.exit(1)
        
        # Uruchom serwisy
        session_api = self.start_session_api()
        if not session_api:
            sys.exit(1)
        
        # Kr√≥tka pauza miƒôdzy uruchomieniami
        time.sleep(2)
        
        business_agent = self.start_business_agent()
        if not business_agent:
            self.cleanup()
            sys.exit(1)
        
        # Czekaj na gotowo≈õƒá serwis√≥w
        self.wait_for_services()
        
        # Poka≈º status
        self.show_status()
        
        # Otw√≥rz przeglƒÖdarkƒô
        try:
            import webbrowser
            time.sleep(2)
            webbrowser.open("http://localhost:8000")
            self.log("üåê Otwarto przeglƒÖdarkƒô", "SUCCESS")
        except Exception as e:
            self.log(f"‚ö†Ô∏è Nie mo≈ºna otworzyƒá przeglƒÖdarki: {e}", "WARNING")
        
        # Monitoruj procesy
        try:
            self.monitor_processes()
        except KeyboardInterrupt:
            pass
        finally:
            self.cleanup()

def main():
    """Punkt wej≈õcia"""
    launcher = AgentLauncher()
    launcher.run()

if __name__ == "__main__":
    main() 